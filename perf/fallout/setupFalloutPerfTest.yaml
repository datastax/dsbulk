# branch and version of the dsbulk to benchmark
branch: "1.x"
version: "1.5.1-SNAPSHOT"

---

ensemble:
  server:
    node.count: 5
    provisioner:
      name: ctool
      properties:
        cloud.provider: openstack
        cloud.tenant: performance
        cloud.instance.type: ms1.small
        name: dseserver-dsbulk-perf
        mark_for_reuse: true
    configuration_manager:
      - name: ctool
        properties:
          java.version: "1.8_151"
          product.type: dse
          product.install.type: tarball
          product.version: 6.7-dev
          enable.graph: false
          json.topology: |
            {
               "cluster":
                {
                  "snitch":"GossipingPropertyFileSnitch",
                  "nodes":
                  {
                    "0":{"datacenter":"kc-dc", "rack":"rack1", "node_type":"Cassandra", "seed":"True"},
                    "1":{"datacenter":"kc-dc", "rack":"rack1", "node_type":"Cassandra", "seed":"True"},
                    "2":{"datacenter":"kc-dc", "rack":"rack1", "node_type":"Cassandra"},
                    "3":{"datacenter":"kc-dc", "rack":"rack1", "node_type":"Cassandra"},
                    "4":{"datacenter":"kc-dc", "rack":"rack1", "node_type":"Cassandra"}
                  }
                }
            }
      - name: ctool_monitoring
        properties:
          components: os,jvm, dse-db, cassandra-all
  observer:
    node.count: 1
    provisioner:
      name: ctool
      properties:
        cloud.tenant: performance
        cloud.instance.type: m1.xlarge
        mark_for_reuse: true
    configuration_manager:
      - name: ctool_monitoring
        properties:
          graphite.create_server: true
  clients:
    - name: dsbulk-client
      node.count: 1
      provisioner:
        name: ctool
        properties:
          cloud.provider: openstack
          cloud.tenant: performance
          cloud.instance.type: m1.xlarge
          mark_for_reuse: true
      configuration_manager:
        - name: ctool
          properties:
            install.maven: true
            java.version: openjdk8
        - name: ctool_monitoring
          properties:
            components: os

workload:
  phases:
    - prepare-data:
        module: bash
        properties:
          target.group: dsbulk-client
          export_output: false
          timeout: 2 hours
          script: |
            cd ${FALLOUT_SCRATCH_DIR}
            sudo apt-get install lftp
            #setup data-set (random Partition Key)
            mkdir -p ${FALLOUT_SCRATCH_DIR}/mnt/data/DSEBulkLoadTest
            chmod 777 ${FALLOUT_SCRATCH_DIR}/mnt/data
            cd ${FALLOUT_SCRATCH_DIR}/mnt/data/DSEBulkLoadTest
            # download in and out form remote ftp
            lftp -e 'mirror /dsbulk/in /home/automaton/fallout_scratch/mnt/data/DSEBulkLoadTest/' -u 'dse_ftp','dse$#@RULES' ftp://fileserver001.datastax.lan/
            lftp -e 'mirror /dsbulk/out /home/automaton/fallout_scratch/mnt/data/DSEBulkLoadTest/' -u 'dse_ftp','dse$#@RULES' ftp://fileserver001.datastax.lan/

            #prepare data for parallel LOAD
            mkdir -p ${FALLOUT_SCRATCH_DIR}/mnt/data/DSEBulkLoadTest/in/data100B_one_file
            cd ${FALLOUT_SCRATCH_DIR}/mnt/data/DSEBulkLoadTest/in/data100B
            cat data100B_0.csv data100B_1.csv data100B_2.csv data100B_3.csv data100B_4.csv data100B_5.csv data100B_6.csv data100B_7.csv data100B_8.csv data100B_9.csv data100B_10.csv data100B_11.csv data100B_12.csv data100B_13.csv data100B_14.csv data100B_15.csv data100B_16.csv data100B_17.csv data100B_18.csv data100B_19.csv > ../data100B_one_file/data100B.csv

            #install maven and java
            sudo apt update --assume-yes
            sudo apt install maven --assume-yes
            sudo apt-get install unzip --assume-yes

            #setup data-set (multiple records per Partition Key)
            cd ${FALLOUT_SCRATCH_DIR}/mnt/data
            git clone https://github.com/riptano/data_faker.git
            cd ${FALLOUT_SCRATCH_DIR}/mnt/data/data_faker
            mvn clean package

            #generate 1 million PKs. Every PK has >= 50 && <= 100 records.
            cd ${FALLOUT_SCRATCH_DIR}/mnt/data/data_faker
            java -jar target/fake-data-generator-1.0.jar 32 1000000 50 100 false

            #prepare data for parallel LOAD ordered
            mkdir -p ${FALLOUT_SCRATCH_DIR}/mnt/data/data_faker/generated_one_file
            cd ${FALLOUT_SCRATCH_DIR}/mnt/data/data_faker/generated
            cat purchases_1.csv purchases_2.csv purchases_3.csv purchases_4.csv purchases_5.csv purchases_6.csv purchases_7.csv purchases_8.csv purchases_9.csv purchases_10.csv purchases_11.csv purchases_12.csv purchases_13.csv purchases_14.csv purchases_15.csv purchases_16.csv purchases_17.csv purchases_18.csv purchases_19.csv purchases_20.csv purchases_21.csv purchases_22.csv purchases_23.csv purchases_24.csv purchases_25.csv purchases_26.csv purchases_27.csv purchases_28.csv purchases_29.csv purchases_30.csv purchases_31.csv purchases_32.csv > ../generated_one_file/purchases.csv
    - setup-dse-schema:
        module: cqlsh
        properties:
          num.nodes: 1
          command: >
                    CREATE KEYSPACE IF NOT EXISTS test WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '3'};
                    CREATE TABLE IF NOT EXISTS test.test100b(pkey TEXT, ccol BIGINT, data TEXT, PRIMARY KEY ((pkey), ccol));
                    CREATE TABLE IF NOT EXISTS test.test1kb(pkey TEXT, ccol BIGINT, data TEXT, PRIMARY KEY ((pkey), ccol));
                    CREATE TABLE IF NOT EXISTS test.test10kb(pkey TEXT, ccol BIGINT, data TEXT, PRIMARY KEY ((pkey), ccol));
                    CREATE TABLE IF NOT EXISTS test.test1mb(pkey TEXT, ccol BIGINT, data TEXT, PRIMARY KEY ((pkey), ccol));
                    CREATE TABLE IF NOT EXISTS test.test100(pkey BIGINT, ccol BIGINT, col0 BIGINT, col1 BIGINT, col2 BIGINT, col3 BIGINT, col4 BIGINT, col5 BIGINT, col6 BIGINT, col7 BIGINT, col8 BIGINT, col9 BIGINT, col10 BIGINT, col11 BIGINT, col12 BIGINT, col13 BIGINT, col14 BIGINT, col15 BIGINT, col16 BIGINT, col17 BIGINT, col18 BIGINT, col19 BIGINT, col20 BIGINT, col21 BIGINT, col22 BIGINT, col23 BIGINT, col24 BIGINT, col25 BIGINT, col26 BIGINT, col27 BIGINT, col28 BIGINT, col29 BIGINT, col30 BIGINT, col31 BIGINT, col32 BIGINT, col33 BIGINT, col34 BIGINT, col35 BIGINT, col36 BIGINT, col37 BIGINT, col38 BIGINT, col39 BIGINT, col40 BIGINT, col41 BIGINT, col42 BIGINT, col43 BIGINT, col44 BIGINT, col45 BIGINT, col46 BIGINT, col47 BIGINT, col48 BIGINT, col49 BIGINT, col50 BIGINT, col51 BIGINT, col52 BIGINT, col53 BIGINT, col54 BIGINT, col55 BIGINT, col56 BIGINT, col57 BIGINT, col58 BIGINT, col59 BIGINT, col60 BIGINT, col61 BIGINT, col62 BIGINT, col63 BIGINT, col64 BIGINT, col65 BIGINT, col66 BIGINT, col67 BIGINT, col68 BIGINT, col69 BIGINT, col70 BIGINT, col71 BIGINT, col72 BIGINT, col73 BIGINT, col74 BIGINT, col75 BIGINT, col76 BIGINT, col77 BIGINT, col78 BIGINT, col79 BIGINT, col80 BIGINT, col81 BIGINT, col82 BIGINT, col83 BIGINT, col84 BIGINT, col85 BIGINT, col86 BIGINT, col87 BIGINT, col88 BIGINT, col89 BIGINT, col90 BIGINT, col91 BIGINT, col92 BIGINT, col93 BIGINT, col94 BIGINT, col95 BIGINT, col96 BIGINT, col97 BIGINT, PRIMARY KEY ((pkey), ccol));
                    CREATE TABLE IF NOT EXISTS test.test10(pkey BIGINT, ccol BIGINT, col0 BIGINT, col1 BIGINT, col2 BIGINT, col3 BIGINT, col4 BIGINT, col5 BIGINT, col6 BIGINT, col7 BIGINT, PRIMARY KEY ((pkey), ccol));
                    CREATE TABLE IF NOT EXISTS test.transactions(user_id TEXT, date timestamp, item TEXT, price float, quantity int, total decimal, currency TEXT, payment TEXT, contact list<text>, PRIMARY KEY ((user_id), date));
    - clone-and-build-dsbulk:
        module: bash
        properties:
          target.group: dsbulk-client
          export_output: false
          script: |
            cd ${FALLOUT_SCRATCH_DIR}
            git clone -b {{branch}} git@github.com:riptano/dsbulk.git
            cd dsbulk
            mvn clean package -DskipTests -P release
            cp dist/target/*.zip ${FALLOUT_SCRATCH_DIR}/mnt/data/
            cd ${FALLOUT_SCRATCH_DIR}/mnt/data/
            unzip *.zip
            rm *.zip
            mv dsbulk-* dsbulk
    - disable-auto-compation-server-0:
        module: bash
        properties:
          target.group: server
          target.ordinals: 0
          export_output: false
          script: |
            nodetool -h localhost disableautocompaction test
            sleep 2m
    - load-csv-performance-test:
        module: bash
        properties:
          target.group: dsbulk-client
          export_output: false
          timeout: 2 hours
          script: |
            cd ${FALLOUT_SCRATCH_DIR}
            DSE_IP=$(echo ${FALLOUT_SERVER_PRODUCT_CONTACT_POINTS} | cut -d "," -f 1)
            # 100b TPC
            mnt/data/dsbulk/bin/dsbulk load -k test -t test100b -header false --batch.mode DISABLED --driver.basic.request.timeout '5 minutes' -url mnt/data/DSEBulkLoadTest/in/data100B/ -h ${DSE_IP} &> test100bLOAD_tpc
            # 100b parallel
            #parallel

  checkers:
    verify_success:
      checker: nofail