server_type: dse
server_install_type: tarball
server_version: 6.7.7
cql_version: 3.4.5
reuse: false
dsbulk_branch: 1.x
connectors: "csv,json"
workloads: "load,unload,count"

---

ensemble:
  server:
    node.count: 5
    provisioner:
      name: ctool
      properties:
        cloud.provider: openstack
        cloud.tenant: performance
        cloud.instance.type: ms1.small
        name: dsbulk-perf-server
        mark_for_reuse: {{reuse}}
    configuration_manager:
      - name: ctool
        properties:
          product.type: {{server_type}}
          product.install.type: {{server_install_type}}
          product.version: {{server_version}}
          enable.graph: false
          cassandra.yaml.set:
            hinted_handoff_enabled: false
            auto_snapshot: false
            batch_size_warn_threshold_in_kb: 64
            unlogged_batch_across_partitions_warn_threshold: 10
      - name: ctool_monitoring
        properties:
          components: os,jvm,cassandra
  observer:
    node.count: 1
    provisioner:
      name: ctool
      properties:
        cloud.provider: nebula
        cloud.tenant: drivers-automation
        cloud.instance.type: m3.large
        mark_for_reuse: {{reuse}}
    configuration_manager:
      - name: ctool
      - name: ctool_monitoring
        properties:
          graphite.create_server: true
          save_graphs: true
          export.enabled: true
          export.prefix: performance_regressions.oss.test.dsbulk
          export.metrics:
            - AVERAGE_CONTEXT_SWITCH(<PHASE>)
            - AVERAGE_LOAD(<PHASE>)
            - AVERAGE_DISK_IO(<PHASE>)
            - AVERAGE_MEMORY(<PHASE>)
            - AVERAGE_CPU(<PHASE>)
            - AVERAGE_GC(<PHASE>)
            - AVERAGE_NETWORK_IO(<PHASE>)
  clients:
    - name: dsbulk-client
      node.count: 1
      provisioner:
        name: ctool
        properties:
          cloud.provider: nebula
          cloud.tenant: drivers-automation
          cloud.instance.type: c4.8xlarge
          mark_for_reuse: {{reuse}}
      configuration_manager:
        - name: ctool
          properties:
            install.maven: true
            java.version: openjdk8
        - name: ctool_monitoring
          properties:
            components: os

workload:
  phases:

    - prepare-data:
        module: bash
        properties:
          target.group: dsbulk-client
          export_output: true
          timeout: 2 hours
          script: |
            cd ${FALLOUT_SCRATCH_DIR}
            sudo apt update --assume-yes
            sudo apt-get install lftp --assume-yes

            #setup data-set (random Partition Key)
            mkdir -p ${FALLOUT_SCRATCH_DIR}/mnt/data/DSEBulkLoadTest
            chmod 777 ${FALLOUT_SCRATCH_DIR}/mnt/data
            cd ${FALLOUT_SCRATCH_DIR}/mnt/data/DSEBulkLoadTest

            # download in and out form remote ftp
            echo "Transferring data from FTP server..."
            lftp -e 'mirror /dsbulk/in /home/automaton/fallout_scratch/mnt/data/DSEBulkLoadTest/ && exit' -u 'dse_ftp','dse$#@RULES' ftp://fileserver001.datastax.lan/
            lftp -e 'mirror /dsbulk/json /home/automaton/fallout_scratch/mnt/data/DSEBulkLoadTest/ && exit' -u 'dse_ftp','dse$#@RULES' ftp://fileserver001.datastax.lan/
            echo "Transfer done"

            du -sh /home/automaton/fallout_scratch/mnt/data/DSEBulkLoadTest/in
            du -sh /home/automaton/fallout_scratch/mnt/data/DSEBulkLoadTest/json

            #install maven and java
            sudo apt-get -q install maven unzip --assume-yes

            # install cqlsh
            sudo pip install --upgrade pip
            sudo pip install cqlsh

    - setup-schema:
        module: cqlsh
        properties:
          num.nodes: 1
          command: >
            CREATE KEYSPACE IF NOT EXISTS test WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '3'};
            CREATE TABLE IF NOT EXISTS test.test100b(pkey TEXT, ccol BIGINT, data TEXT, PRIMARY KEY ((pkey), ccol));
            CREATE TABLE IF NOT EXISTS test.test1kb(pkey TEXT, ccol BIGINT, data TEXT, PRIMARY KEY ((pkey), ccol));
            CREATE TABLE IF NOT EXISTS test.test10kb(pkey TEXT, ccol BIGINT, data TEXT, PRIMARY KEY ((pkey), ccol));
            CREATE TABLE IF NOT EXISTS test.test1mb(pkey TEXT, ccol BIGINT, data TEXT, PRIMARY KEY ((pkey), ccol));
            CREATE TABLE IF NOT EXISTS test.test100(pkey BIGINT, ccol BIGINT, col0 BIGINT, col1 BIGINT, col2 BIGINT, col3 BIGINT, col4 BIGINT, col5 BIGINT, col6 BIGINT, col7 BIGINT, col8 BIGINT, col9 BIGINT, col10 BIGINT, col11 BIGINT, col12 BIGINT, col13 BIGINT, col14 BIGINT, col15 BIGINT, col16 BIGINT, col17 BIGINT, col18 BIGINT, col19 BIGINT, col20 BIGINT, col21 BIGINT, col22 BIGINT, col23 BIGINT, col24 BIGINT, col25 BIGINT, col26 BIGINT, col27 BIGINT, col28 BIGINT, col29 BIGINT, col30 BIGINT, col31 BIGINT, col32 BIGINT, col33 BIGINT, col34 BIGINT, col35 BIGINT, col36 BIGINT, col37 BIGINT, col38 BIGINT, col39 BIGINT, col40 BIGINT, col41 BIGINT, col42 BIGINT, col43 BIGINT, col44 BIGINT, col45 BIGINT, col46 BIGINT, col47 BIGINT, col48 BIGINT, col49 BIGINT, col50 BIGINT, col51 BIGINT, col52 BIGINT, col53 BIGINT, col54 BIGINT, col55 BIGINT, col56 BIGINT, col57 BIGINT, col58 BIGINT, col59 BIGINT, col60 BIGINT, col61 BIGINT, col62 BIGINT, col63 BIGINT, col64 BIGINT, col65 BIGINT, col66 BIGINT, col67 BIGINT, col68 BIGINT, col69 BIGINT, col70 BIGINT, col71 BIGINT, col72 BIGINT, col73 BIGINT, col74 BIGINT, col75 BIGINT, col76 BIGINT, col77 BIGINT, col78 BIGINT, col79 BIGINT, col80 BIGINT, col81 BIGINT, col82 BIGINT, col83 BIGINT, col84 BIGINT, col85 BIGINT, col86 BIGINT, col87 BIGINT, col88 BIGINT, col89 BIGINT, col90 BIGINT, col91 BIGINT, col92 BIGINT, col93 BIGINT, col94 BIGINT, col95 BIGINT, col96 BIGINT, col97 BIGINT, PRIMARY KEY ((pkey), ccol));
            CREATE TABLE IF NOT EXISTS test.test10(pkey BIGINT, ccol BIGINT, col0 BIGINT, col1 BIGINT, col2 BIGINT, col3 BIGINT, col4 BIGINT, col5 BIGINT, col6 BIGINT, col7 BIGINT, PRIMARY KEY ((pkey), ccol));
            CREATE TABLE IF NOT EXISTS test.transactions(user_id TEXT, date timestamp, item TEXT, price float, quantity int, total decimal, currency TEXT, payment TEXT, contact list<text>, PRIMARY KEY ((user_id), date));

    - clone-and-build-dsbulk:
        module: bash
        properties:
          target.group: dsbulk-client
          export_output: false
          script: |
            cd ${FALLOUT_SCRATCH_DIR}
            git clone -b {{dsbulk_branch}} git@github.com:riptano/dsbulk.git
            cd dsbulk
            mvn clean package -DskipTests -Prelease --quiet
            if [[ -d dist ]]
            then
              cp dist/target/*.zip ${FALLOUT_SCRATCH_DIR}/mnt/data/
            else
              cp distribution/target/*.zip ${FALLOUT_SCRATCH_DIR}/mnt/data/
            fi
            cd ${FALLOUT_SCRATCH_DIR}/mnt/data/
            unzip *.zip
            rm *.zip
            mv dsbulk-* dsbulk
            mkdir -p ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs

    - disable-auto-compaction:
        module: bash
        properties:
          target.group: server
          target.ordinals: all
          export_output: false
          script: |
            nodetool -h localhost disableautocompaction test
            sleep 2m

    - load-csv-performance-test:
        module: bash
        properties:
          target.group: dsbulk-client
          export_output: true
          timeout: 8 hours
          script: |
            contains() { for e in  $(echo "$1" | tr "," "\n"); do [[ "$e" == "$2" ]] && return 0; done; return 1; }
            if contains {{connectors}} csv && contains {{workloads}} load; then
              cd ${FALLOUT_SCRATCH_DIR}

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test100b;'

              # 100b TPC
              echo "CSV - Loading 100B (multiple files)"

              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test100b -header false \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/data100B/ \
                --batch.mode REPLICA_SET \
                --batch.maxBatchStatements 10 \
                --driver.basic.request.timeout '5 minutes' \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.maxConcurrentQueries 64C \
                --engine.executionId LOAD_CSV_100B_TPC \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_CSV_100B_TPC_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/in/data100B

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test100b;'

              # 100b parallel
              echo "CSV - Loading 100B (single file)"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test100b -header false \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/data100B_one_file/ \
                --batch.mode REPLICA_SET \
                --batch.maxBatchStatements 10 \
                --driver.basic.request.timeout '5 minutes' \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.maxConcurrentQueries 8C \
                --engine.executionId LOAD_CSV_100B_PARALLEL \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_CSV_100B_PARALLEL_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/in/data100B_one_file/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test1kb;'

              # 1 KB
              echo "CSV - Loading 1KB"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test1kb -header false \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/data1KB/ \
                --batch.mode REPLICA_SET \
                --batch.maxBatchStatements 10 \
                --driver.basic.request.timeout '5 minutes' \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.executionId LOAD_CSV_1KB \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_CSV_1KB_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/in/data1KB/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test10kb;'

              # 10 KB
              echo "CSV - Loading 10KB"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test10kb -header false \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/data10KB/ \
                --connector.csv.maxCharsPerColumn 11000 \
                --batch.mode DISABLED \
                --driver.basic.request.timeout '5 minutes' \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.executionId LOAD_CSV_10KB \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_CSV_10KB_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/in/data10KB/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test1mb;'

              # 1 MB
              echo "CSV - Loading 1MB"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test1mb -header false \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/data1MB/ \
                --connector.csv.maxCharsPerColumn 1100000 \
                --batch.mode DISABLED \
                --driver.basic.request.timeout '5 minutes' \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.maxConcurrentQueries 1C \
                --engine.executionId LOAD_CSV_1MB \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_CSV_1MB_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/in/data1MB/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test10;'

              # 10 columns
              echo "CSV - Loading 10 cols"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test10 -header false \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/data10/ \
                --batch.mode REPLICA_SET \
                --batch.maxBatchStatements 10 \
                --driver.basic.request.timeout '5 minutes'  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.maxConcurrentQueries 16C \
                --engine.executionId LOAD_CSV_10_COLS \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_CSV_10_COLS_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/in/data10/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.transactions;'

              # transactions tpc
              echo "CSV - Loading transactions (multiple files)"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t transactions -header false \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/transactions/generated \
                -delim '|' \
                -m 'user_id,date,item,price,quantity,total,currency,payment,contact' \
                --codec.timestamp ISO_ZONED_DATE_TIME \
                --batch.mode PARTITION_KEY \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.executionId LOAD_CSV_TRANSACTIONS_TPC \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_CSV_TRANSACTIONS_TPC_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/in/transactions/generated/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.transactions;'

              # transactions parallel
              echo "CSV - Loading transactions (single file)"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t transactions -header false \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/transactions/generated_one_file \
                -delim '|' \
                -m 'user_id,date,item,price,quantity,total,currency,payment,contact' \
                --codec.timestamp ISO_ZONED_DATE_TIME \
                --batch.mode PARTITION_KEY \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.executionId LOAD_CSV_TRANSACTIONS_PARALLEL \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_CSV_TRANSACTIONS_PARALLEL_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/in/transactions/generated_one_file

              # transactions tpc batch disabled
              echo "CSV - Loading transactions (multiple files, batch disabled)"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t transactions -header false \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/transactions/generated \
                -delim '|' \
                -m 'user_id,date,item,price,quantity,total,currency,payment,contact' \
                --codec.timestamp ISO_ZONED_DATE_TIME \
                --batch.mode DISABLED \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.executionId LOAD_CSV_TRANSACTIONS_TPC \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_CSV_TRANSACTIONS_TPC_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/in/transactions/generated/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.transactions;'

              # transactions parallel batch disabled
              echo "CSV - Loading transactions (single file, batch disabled)"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t transactions -header false \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/transactions/generated_one_file \
                -delim '|' \
                -m 'user_id,date,item,price,quantity,total,currency,payment,contact' \
                --codec.timestamp ISO_ZONED_DATE_TIME \
                --batch.mode DISABLED \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.executionId LOAD_CSV_TRANSACTIONS_PARALLEL \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_CSV_TRANSACTIONS_PARALLEL_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/in/transactions/generated_one_file

            else
              echo "ignoring load-csv-performance-test step"
            fi

    - load-json-performance-test:
        module: bash
        properties:
          target.group: dsbulk-client
          export_output: true
          timeout: 8 hours
          script: |
            contains() { for e in  $(echo "$1" | tr "," "\n"); do [[ "$e" == "$2" ]] && return 0; done; return 1; }
            if contains {{connectors}} json && contains {{workloads}} load; then
              cd ${FALLOUT_SCRATCH_DIR}

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test100b;'

              # 100b
              echo "JSON - Loading 100B"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test100b -c json \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/json/data100B/ \
                --batch.mode REPLICA_SET \
                --batch.maxBatchStatements 10 \
                --driver.basic.request.timeout '5 minutes' \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.maxConcurrentQueries 64C \
                --engine.executionId LOAD_JSON_100B \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_JSON_100B_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/json/data100B/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test1kb;'

              # 1KB
              echo "JSON - Loading 1KB"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test1kb -c json \
              -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
              -url mnt/data/DSEBulkLoadTest/json/data1KB/  \
              --batch.mode REPLICA_SET \
              --batch.maxBatchStatements 10 \
              --driver.basic.request.timeout '5 minutes' \
              -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
              --engine.executionId LOAD_JSON_1KB  \
              &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_JSON_1KB_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/json/data1KB/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test10kb;'

              # 10KB
              echo "JSON - Loading 10KB"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test10kb -c json  \
              -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
              -url mnt/data/DSEBulkLoadTest/json/data10KB/  \
              --batch.mode DISABLED  \
              --driver.basic.request.timeout '5 minutes'  \
              -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
              --engine.executionId LOAD_JSON_10KB  \
              &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_JSON_10KB_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/json/data10KB/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test1mb;'

              # 1MB
              echo "JSON - Loading 1MB"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test1mb -c json  \
              -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
              -url mnt/data/DSEBulkLoadTest/json/data1MB/  \
              --batch.mode DISABLED \
              --driver.basic.request.timeout '5 minutes'  \
              -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
              --engine.maxConcurrentQueries 1C \
              --engine.executionId LOAD_JSON_1MB  \
              &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_JSON_1MB_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/json/data1MB/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.test10;'

              # 10 columns
              echo "JSON - Loading 10 cols"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t test10 -c json  \
              -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
              -url mnt/data/DSEBulkLoadTest/json/data10/  \
              --batch.mode REPLICA_SET  \
              --batch.maxBatchStatements 10  \
              --driver.basic.request.timeout '5 minutes'  \
              -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
              --engine.maxConcurrentQueries 16C \
              --engine.executionId LOAD_JSON_10_COLS  \
              &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_JSON_10_COLS_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/json/data10/

              cqlsh ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} --cqlversion={{cql_version}} -e 'TRUNCATE test.transactions;'

              # transactions
              echo "JSON - Loading transactions"
              mnt/data/dsbulk/bin/dsbulk load -verbosity 2 -k test -t transactions -c json  \
              -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
              -url mnt/data/DSEBulkLoadTest/json/transactions/generated  \
              --codec.timestamp ISO_ZONED_DATE_TIME  \
              --batch.mode PARTITION_KEY  \
              --driver.basic.request.timeout '5 minutes'  \
              -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
              --engine.executionId LOAD_JSON_TRANSACTIONS  \
              &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/LOAD_JSON_TRANSACTIONS_console.txt
              echo "Exit status" $?

              rm -Rf mnt/data/DSEBulkLoadTest/json/transactions/generated

              else
              echo "ignoring load-json-performance-test step"
              fi

    - repair:
        module: repair
        properties:
          keyspace: test
          full: true
          max.server.tasks: 4

    - compact:
        module: bash
        properties:
          target.group: server
          target.ordinals: all
          export_output: false
          timeout: 8 hours
          script: |
            nodetool -h localhost enableautocompaction test
            nodetool -h localhost compact test

    - wait-for-compactions:
        module: wait_for_compactions

    - unload-csv-performance-test:
        module: bash
        properties:
          target.group: dsbulk-client
          export_output: true
          timeout: 8 hours
          script: |
            contains() { for e in  $(echo "$1" | tr "," "\n"); do [[ "$e" == "$2" ]] && return 0; done; return 1; }
            if contains {{connectors}} csv && contains {{workloads}} unload; then
              cd ${FALLOUT_SCRATCH_DIR}

              # 100B TPC
              echo "CSV - Unloading 100B (multiple token ranges)"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data100B/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test100b -header false  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data100B/  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_CSV_100B_TPC  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_CSV_100B_TPC_console.txt
              echo "Exit status" $?

              # 100B parallel
              echo "CSV - Unloading 100B (single token range)"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data100B/
              mnt/data/dsbulk/bin/dsbulk unload -header false  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data100B/  \
                -query 'SELECT * FROM test.test100b WHERE token(pkey) > -9223372036854775808 and token (pkey) <= -9223372036854775808'  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_CSV_100B_PARALLEL  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_CSV_100B_PARALLEL_console.txt
              echo "Exit status" $?

              # 100B TPC single file
              echo "CSV - Unloading 100B (multiple token ranges, single file)"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data100B/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test100b -header false  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data100B/ \
                -maxConcurrentFiles 1 \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs \
                --engine.executionId UNLOAD_CSV_100B_TPC_SINGLE_FILE  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_CSV_100B_TPC_SINGLE_FILE_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/out/data100B/

              # 1KB
              echo "CSV - Unloading 1KB"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data1KB/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test1kb -header false  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data1KB/  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_CSV_1KB  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_CSV_1KB_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/out/data1KB/

              # 10KB
              echo "CSV - Unloading 10KB"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data10KB/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test10kb -header false  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data10KB/  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_CSV_10KB  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_CSV_10KB_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/out/data10KB/

              # 1MB
              echo "CSV - Unloading 1MB"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data1MB/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test1mb -header false  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data1MB/ \
                --driver.advanced.continuous-paging.page-size 500000 \
                --driver.advanced.continuous-paging.page-size-in-bytes true  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_CSV_1MB  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_CSV_1MB_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/out/data1MB/

              # 10 cols
              echo "CSV - Unloading 10 cols"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data10/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test10 -header false  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data10/  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_CSV_10_COLS  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_CSV_10_COLS_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/out/data10/

              # transactions TPC
              echo "CSV - Unloading transactions (multiple token ranges)"
              rm -Rf mnt/data/DSEBulkLoadTest/in/transactions/out
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t transactions -header false  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/transactions/out  \
                -m 'user_id,date,item,price,quantity,total,currency,payment,contact'  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_CSV_TRANSACTIONS_TPC  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_CSV_TRANSACTIONS_TPC_console.txt
              echo "Exit status" $?

              # transactions parallel
              echo "CSV - Unloading transactions (single token range)"
              rm -Rf mnt/data/DSEBulkLoadTest/in/transactions/out
              mnt/data/dsbulk/bin/dsbulk unload -header false  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/transactions/out  \
                -query 'SELECT * FROM test.transactions WHERE token(user_id) > -9223372036854775808 and token (user_id) <= -9223372036854775808'  \
                -m 'user_id,date,item,price,quantity,total,currency,payment,contact'  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_CSV_TRANSACTIONS_PARALLEL \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_CSV_TRANSACTIONS_PARALLEL_console.txt
              echo "Exit status" $?

              # transactions TPC single file
              echo "CSV - Unloading transactions (multiple token ranges, single file)"
              rm -Rf mnt/data/DSEBulkLoadTest/in/transactions/out
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t transactions -header false  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/in/transactions/out  \
                -maxConcurrentFiles 1 \
                -m 'user_id,date,item,price,quantity,total,currency,payment,contact'  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_CSV_TRANSACTIONS_TPC_SINGLE_FILE  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_CSV_TRANSACTIONS_TPC_SINGLE_FILE_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/in/transactions/out

            else
              echo "ignoring unload-csv-performance-test step"
            fi

    - unload-json-performance-test:
        module: bash
        properties:
          target.group: dsbulk-client
          export_output: true
          timeout: 8 hours
          script: |
            contains() { for e in  $(echo "$1" | tr "," "\n"); do [[ "$e" == "$2" ]] && return 0; done; return 1; }
            if contains {{connectors}} json && contains {{workloads}} unload; then
              cd ${FALLOUT_SCRATCH_DIR}

              echo "JSON - Unloading 100B"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data100B/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test100b -c json  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data100B/  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_JSON_100B  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_JSON_100B_console.txt
              echo "Exit status" $?

              echo "JSON - Unloading 100B single file"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data100B/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test100b -c json  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data100B/  \
                -maxConcurrentFiles 1 \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_JSON_100B_SINGLE_FILE  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_JSON_100B_SINGLE_FILE_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/out/data100B/

              echo "JSON - Unloading 1KB"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data1KB/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test1kb -c json  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data1KB/  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_JSON_1KB  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_JSON_1KB_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/out/data1KB/

              echo "JSON - Unloading 10KB"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data10KB/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test10kb -c json  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data10KB/  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_JSON_10KB  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_JSON_10KB_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/out/data10KB/

              echo "JSON - Unloading 1MB"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data1MB/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test1mb -c json  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data1MB/ \
                --driver.advanced.continuous-paging.page-size 500000 \
                --driver.advanced.continuous-paging.page-size-in-bytes true  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_JSON_1MB  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_JSON_1MB_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/out/data1MB/

              echo "JSON - Unloading 10 cols"
              rm -Rf mnt/data/DSEBulkLoadTest/out/data10/
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t test10 -c json  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/out/data10/  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_JSON_10_COLS  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_JSON_10_COLS_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/out/data10/

              echo "JSON - Unloading transactions"
              rm -Rf mnt/data/DSEBulkLoadTest/json/transactions/out
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t transactions -c json  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/json/transactions/out  \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_JSON_TRANSACTIONS  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_JSON_TRANSACTIONS_console.txt
              echo "Exit status" $?

              echo "JSON - Unloading transactions, single file"
              rm -Rf mnt/data/DSEBulkLoadTest/json/transactions/out
              mnt/data/dsbulk/bin/dsbulk unload -verbosity 2 -k test -t transactions -c json  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -url mnt/data/DSEBulkLoadTest/json/transactions/out  \
                -maxConcurrentFiles 1 \
                --schema.splits 10 \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId UNLOAD_JSON_TRANSACTIONS_SINGLE_FILE  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/UNLOAD_JSON_TRANSACTIONS_SINGLE_FILE_console.txt
              echo "Exit status" $?
              rm -Rf mnt/data/DSEBulkLoadTest/json/transactions/out

            else
              echo "ignoring unload-json-performance-test step"
            fi

    - count-performance-test:
        module: bash
        properties:
          target.group: dsbulk-client
          export_output: true
          timeout: 1 hours
          script: |
            contains() { for e in  $(echo "$1" | tr "," "\n"); do [[ "$e" == "$2" ]] && return 0; done; return 1; }
            if contains {{workloads}} count; then

              cd ${FALLOUT_SCRATCH_DIR}

              echo "Counting 100B"
              mnt/data/dsbulk/bin/dsbulk count -verbosity 2 -k test -t test100b  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.maxConcurrentQueries 16C \
                --engine.executionId COUNT_100B  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/COUNT_100B_console.txt
              echo "Exit status" $?

              echo "Counting 1KB"
              mnt/data/dsbulk/bin/dsbulk count -verbosity 2 -k test -t test1kb  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.maxConcurrentQueries 16C \
                --engine.executionId COUNT_1KB  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/COUNT_1KB_console.txt
              echo "Exit status" $?

              echo "Counting 10KB"
              mnt/data/dsbulk/bin/dsbulk count -verbosity 2 -k test -t test10kb  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId COUNT_10KB  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/COUNT_10KB_console.txt
              echo "Exit status" $?

              echo "Counting 1MB"
              mnt/data/dsbulk/bin/dsbulk count -verbosity 2 -k test -t test1mb  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.executionId COUNT_1MB  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/COUNT_1MB_console.txt
              echo "Exit status" $?

              echo "Counting 10 columns"
              mnt/data/dsbulk/bin/dsbulk count -verbosity 2 -k test -t test10  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.maxConcurrentQueries 16C \
                --engine.executionId COUNT_10  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/COUNT_10_console.txt
              echo "Exit status" $?

              echo "Counting transactions"
              mnt/data/dsbulk/bin/dsbulk count -verbosity 2 -k test -t transactions  \
                -h ${FALLOUT_SERVER_PRODUCT_CONTACT_POINT} \
                -logDir ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs  \
                --engine.maxConcurrentQueries 16C \
                --engine.executionId COUNT_TRANSACTIONS  \
                &> ${FALLOUT_ARTIFACT_DIR}/dsbulk-logs/COUNT_TRANSACTIONS_console.txt
              echo "Exit status" $?

            else
              echo "ignoring count-performance-test step"
            fi
  checkers:
    verify_success:
      checker: nofail