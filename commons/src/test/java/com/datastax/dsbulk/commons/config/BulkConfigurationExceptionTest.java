package com.datastax.dsbulk.commons.config;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.catchThrowable;

import com.datastax.dsbulk.commons.codecs.util.OverflowStrategy;
import com.datastax.dsbulk.commons.internal.config.DefaultLoaderConfig;
import com.typesafe.config.ConfigException;
import com.typesafe.config.ConfigException.BadBean;
import com.typesafe.config.ConfigFactory;
import java.io.Serializable;
import java.util.stream.Stream;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

class BulkConfigurationExceptionTest {

  @ParameterizedTest
  @MethodSource
  void should_create_exception_with_expected_message(
      ConfigException ce, String basePath, String expectedErrorMessage) {
    BulkConfigurationException bce =
        BulkConfigurationException.fromTypeSafeConfigException(ce, basePath);
    assertThat(bce).hasMessageContaining(expectedErrorMessage);
  }

  @SuppressWarnings("unused")
  static Stream<Arguments> should_create_exception_with_expected_message() {
    return Stream.of(
        // ConfigException.WrongType
        Arguments.of(
            catchThrowable(() -> ConfigFactory.parseString("key=NotANumber").getInt("key")),
            "base.path",
            "Invalid value for base.path.key, expecting NUMBER, got STRING [at: String: 1]"),
        // ConfigException.WrongType, generated by DefaultLoaderConfig
        Arguments.of(
            catchThrowable(
                () ->
                    new DefaultLoaderConfig(ConfigFactory.parseString("key=NotAClass"))
                        .getClass("key", Serializable.class)),
            "base.path",
            "Invalid value for base.path.key, expecting FQCN or short class name, got 'NotAClass' [at: String: 1]"),
        // ConfigException.BadValue (enum)
        Arguments.of(
            catchThrowable(
                () ->
                    ConfigFactory.parseString("key=NotAnEnum")
                        .getEnum(OverflowStrategy.class, "key")),
            "base.path",
            "Invalid value for base.path.key, expecting one of REJECT, TRUNCATE, got: 'NotAnEnum' [at: String: 1]"),
        // ConfigException.BadValue (not enum)
        Arguments.of(
            catchThrowable(() -> ConfigFactory.parseString("key=NotADuration").getDuration("key")),
            "base.path",
            "Invalid value for base.path.key: No number in duration value 'NotADuration' [at: String: 1]"),
        // ConfigException.Null (enum)
        Arguments.of(
            catchThrowable(() -> ConfigFactory.parseString("key=null").getString("key")),
            "base.path",
            "Invalid value for base.path.key, expecting STRING, got NULL [at: String: 1]"),
        // ConfigException.Parse
        Arguments.of(
            catchThrowable(() -> ConfigFactory.parseString("key=[ParseError").getStringList("key")),
            "base.path",
            "List should have ended with ] or had a comma"),
        // ConfigException.Other
        Arguments.of(new BadBean("Not a standard message"), "base.path", "Not a standard message"));
  }
}
