/*
 * Copyright DataStax, Inc.
 *
 * This software is subject to the below license agreement.
 * DataStax may make changes to the agreement from time to time,
 * and will post the amended terms at
 * https://www.datastax.com/terms/datastax-dse-bulk-utility-license-terms.
 */
package com.datastax.dsbulk.commons.config;

import com.typesafe.config.ConfigException;
import edu.umd.cs.findbugs.annotations.NonNull;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/** Thrown when DSBulk fails to configure itself. */
public class BulkConfigurationException extends RuntimeException {

  private static final Pattern GENERIC_PATTERN =
      Pattern.compile("(.+): (\\d+): (.+)", Pattern.CASE_INSENSITIVE);

  private static final Pattern WRONG_TYPE_PATTERN =
      Pattern.compile(
          "(.+): (\\d+): (.+) has type (.+) rather than (.+)", Pattern.CASE_INSENSITIVE);

  private static final Pattern WRONG_VALUE_PATTERN =
      Pattern.compile("(.+): (\\d+): (.+): Expecting (.+), got (.+)", Pattern.CASE_INSENSITIVE);

  private static final Pattern NULL_PATTERN =
      Pattern.compile(
          "(.+): (\\d+): Configuration key '(.+)' is set to null but expected (.+)",
          Pattern.CASE_INSENSITIVE);

  private static final Pattern BAD_ENUM_PATTERN =
      Pattern.compile(
          "(.+): (\\d+): Invalid value at '(.+)': The enum class .+ has no constant of the name ('.+') \\(should be one of \\[([^]]+)]\\.\\)",
          Pattern.CASE_INSENSITIVE);

  private static final Pattern BAD_VALUE_PATTERN =
      Pattern.compile("(.+): (\\d+): Invalid value at '(.+)': (.+)", Pattern.CASE_INSENSITIVE);

  public BulkConfigurationException(String message) {
    super(message);
  }

  public BulkConfigurationException(Throwable cause) {
    this(cause.getMessage(), cause);
  }

  public BulkConfigurationException(String message, Throwable cause) {
    super(message, cause);
  }

  /**
   * Creates a {@link BulkConfigurationException} from a {@link ConfigException}, sanitizing the
   * error message for better user experience.
   *
   * <p>The origin description, usually placed at the beginning of the error message, is placed
   * rather at the end, enclosed in parentheses.
   *
   * @param e The original exception
   * @param basePath The base path of the configuration; required to create an absolute path from an
   *     error message containing relative paths.
   * @return A {@link BulkConfigurationException} with sanitized error message.
   */
  @NonNull
  public static BulkConfigurationException fromTypeSafeConfigException(
      @NonNull ConfigException e, @NonNull String basePath) {
    if (!basePath.isEmpty()) {
      basePath = basePath + '.';
    }
    try {
      if (e instanceof ConfigException.WrongType) {
        // This will happen if a user provides the wrong type, e.g. a string where a number was
        // expected. Sanitized message will look like this:
        // "Invalid value for dsbulk.connector.csv.recursive, expecting STRING, got BOOLEAN
        // (origin)"
        String errorMsg = e.getMessage();
        Matcher matcher = WRONG_TYPE_PATTERN.matcher(errorMsg);
        if (matcher.find()) {
          // errors generated by TypeSafe Config
          errorMsg =
              matcher.replaceAll(
                  "Invalid value for " + basePath + "$3, expecting $5, got $4 [at: $1: $2]");
          return new BulkConfigurationException(errorMsg);
        }
        matcher = WRONG_VALUE_PATTERN.matcher(errorMsg);
        if (matcher.find()) {
          // errors generated by LoaderConfig methods, the error message is slightly different
          errorMsg =
              matcher.replaceAll(
                  "Invalid value for " + basePath + "$3, expecting $4, got $5 [at: $1: $2]");
          return new BulkConfigurationException(errorMsg);
        }

      } else if (e instanceof ConfigException.BadValue) {
        // Errors related to unknown enum constants to improve the error message,
        // which will look like this:
        // Invalid value for dsbulk.connector.csv.recursive, expecting one of X, Y, Z, got: 'weird'
        String errorMsg = e.getMessage();
        Matcher matcher = BAD_ENUM_PATTERN.matcher(errorMsg);
        if (matcher.find()) {
          errorMsg =
              matcher.replaceAll(
                  "Invalid value for "
                      + basePath
                      + "$3, expecting one of $5, got: $4 [at: $1: $2]");
          return new BulkConfigurationException(errorMsg);
        }
        // Other cases of bad values, e.g. a Duration that could not be parsed
        matcher = BAD_VALUE_PATTERN.matcher(errorMsg);
        if (matcher.find()) {
          errorMsg = matcher.replaceAll("Invalid value for " + basePath + "$3: $4 [at: $1: $2]");
          return new BulkConfigurationException(errorMsg);
        }

      } else if (e instanceof ConfigException.Null) {
        String errorMsg = e.getMessage();
        Matcher matcher = NULL_PATTERN.matcher(errorMsg);
        if (matcher.find()) {
          errorMsg =
              matcher.replaceAll(
                  "Invalid value for " + basePath + "$3, expecting $4, got NULL [at: $1: $2]");
          return new BulkConfigurationException(errorMsg);
        }
      }

      // Other patterns: we simply invert the message to place the origin at the end.
      String errorMsg = e.getMessage();
      Matcher matcher = GENERIC_PATTERN.matcher(errorMsg);
      if (matcher.find()) {
        errorMsg = matcher.replaceAll("$3 [at: $1: $2]");
        return new BulkConfigurationException(errorMsg);
      }

    } catch (RuntimeException ignored) {
    }
    // if the sanitizing fails, return an exception with original message
    return new BulkConfigurationException(e.getMessage());
  }
}
