# Java Driver configuration.
#
# See the [Java Driver configuration reference](https://docs.datastax.com/en/developer/java-driver/4.3/manual/core/configuration/reference/)
# for instructions on how to configure the driver properly.
#
# The settings below provide an optimal driver configuration for DSBulk for most use cases.
datastax-java-driver {

  # Basic options.
  basic {

    # The contact points to use for the initial connection to the cluster.
    #
    # These are addresses of Cassandra nodes that the driver uses to discover the cluster topology. Only one contact point is required (the driver will retrieve the address of the other nodes automatically), but it is usually a good idea to provide more than one contact point, because if that single contact point is unavailable, the driver cannot initialize itself correctly.
    #
    # This must be a list of strings with each contact point specified as "host:port". If the host is a DNS name that resolves to multiple A-records, all the corresponding addresses will be used. Do not use "localhost" as the host name (since it resolves to both IPv4 and IPv6 addresses on some platforms).
    #
    # Note that Cassandra 3 and below requires all nodes in a cluster to share the same port (see CASSANDRA-7544).
    #
    # Note: on Cloud deployments, DSBulk automatically sets this option to an empty list, as contact points are not allowed to be explicitly provided when connecting to DataStax Apollo databases.
    # @type list<string>
    contact-points = ["127.0.0.1:9042"]

    # The location of the cloud secure bundle used to connect to Datastax Apache Cassandra as a
    # service.
    #
    # This setting must be a valid URL. If the protocol is not specified, it is implicitly assumed to be the `file://` protocol, in which case the value is expected to be a valid path on the local filesystem. For example, `/a/path/to/bundle` will be interpreted as `file:/a/path/to/bunde`. If the protocol is provided explicitly, then the value will be used as is.
    #
    # Note: if you set this to a non-null value, DSBulk assumes that you are connecting to an DataStax Apollo database; in this case, you should not set any of the following settings:
    #
    # - `datastax-java-driver.basic.contact-points`
    # - `datastax-java-driver.basic.request.consistency`
    # - `datastax-java-driver.advanced.ssl-engine-factory.*`
    #
    # If you do so, a log will be emitted and the setting will be ignored.
    # @type string
    cloud.secure-connect-bundle = null

    # How often the driver tries to reload the configuration. By default, hot-reloading is disabled in DSBulk.
    config-reload-interval = 0

    request {

      # How long the driver waits for a request to complete. This is a global limit on the duration of a session.execute() call, including any internal retries the driver might do.
      #
      # By default, this value is set pretty high to ensure that DDL queries don't time out, in order to provide the best experience for new users trying the driver with the out-of-the-box configuration. For any serious deployment, we recommend that you use separate configuration profiles for DDL and DML; you can then set the DML timeout much lower (down to a few milliseconds if needed).
      #
      # Note that, because timeouts are scheduled on the driver's timer thread, the duration specified here must be greater than the timer tick duration defined by the `advanced.netty.timer.tick-duration` setting (see below). If that is not the case, timeouts will not be triggered as timely as desired.
      timeout = 60 seconds

      # The consistency level to use for all queries. Note that stronger consistency levels usually result in reduced throughput. In addition, any level higher than `ONE` will automatically disable continuous paging, which can dramatically reduce read throughput.
      #
      # Valid values are: `ANY`, `LOCAL_ONE`, `ONE`, `TWO`, `THREE`, `LOCAL_QUORUM`, `QUORUM`, `EACH_QUORUM`, `ALL`.
      #
      # Note: on Cloud deployments, the only accepted consistency level when writing is `LOCAL_QUORUM`. Therefore, the default value is `LOCAL_ONE`, except when loading in Cloud deployments, in which case the default is automatically changed to `LOCAL_QUORUM`.
      consistency = LOCAL_ONE

      # The page size. This controls how many rows will be retrieved simultaneously in a single network roundtrip (the goal being to avoid loading too many results in memory at the same time). If there are more results, additional requests will be used to retrieve them (either automatically if you iterate with the sync API, or explicitly with the async API's `fetchNextPage` method). If the value is 0 or negative, it will be ignored and the request will not be paged.
      page-size = 5000

      # The serial consistency level. The allowed values are `SERIAL` and `LOCAL_SERIAL`.
      serial-consistency = LOCAL_SERIAL

      # The default idempotence for all queries executed in DSBulk. Setting this to false will cause all write failures to not be retried.
      default-idempotence = true

    }

    # The policy that decides the "query plan" for each query; that is, which nodes to try as coordinators, and in which order.
    load-balancing-policy {

      # The class of the policy. If it is not qualified, the driver assumes that it resides in the package `com.datastax.oss.driver.internal.core.loadbalancing`.
      #
      # DSBulk uses a special policy that infers the local datacenter from the contact points. You can also specify a custom class that implements `LoadBalancingPolicy` and has a public constructor with two arguments: the `DriverContext` and a `String` representing the profile name.
      class = com.datastax.dse.driver.internal.core.loadbalancing.DseDcInferringLoadBalancingPolicy

      # The datacenter that is considered "local": the default policy will only include nodes from this datacenter in its query plans. Set this to a non-null value if you want to force the local datacenter; otherwise, the `DseDcInferringLoadBalancingPolicy` used by default by DSBulk will infer the local datacenter from the provided contact points.
      # @type string
      local-datacenter = null

    }

  }

  # Advanced options.
  advanced {

    protocol {

      # The native protocol version to use. If this option is absent, the driver looks up the versions of the nodes at startup (by default in `system.peers.release_version`), and chooses the highest common protocol version. For example, if you have a mixed cluster with Apache Cassandra 2.1 nodes (protocol v3) and Apache Cassandra 3.0 nodes (protocol v3 and v4), then protocol v3 is chosen. If the nodes don't have a common protocol version, initialization fails. If this option is set, then the given version will be used for all connections, without any negotiation or downgrading. If any of the contact points doesn't support it, that contact point will be skipped. Once the protocol version is set, it can't change for the rest of the driver's lifetime; if an incompatible node joins the cluster later, connection will fail and the driver will force it down (i.e. never try to connect to it again).
      # @type string
      version = null

      # The name of the algorithm used to compress protocol frames. The possible values are: `lz4`, `snappy` or `none` to indicate no compression (this is functionally equivalent to omitting the option).
      compression = none
    }

    connection {

      # The timeout to use for internal queries that run as part of the initialization process, just after we open a connection. If this timeout fires, the initialization of the connection will fail. If this is the first connection ever, the driver will fail to initialize as well, otherwise it will retry the connection later.
      init-query-timeout = ${datastax-java-driver.basic.request.timeout}

      # The timeout to use when the driver changes the keyspace on a connection at runtime (this happens when the client issues a `USE ...` query, and all connections belonging to the current session need to be updated).
      set-keyspace-timeout = ${datastax-java-driver.basic.request.timeout}

      # The driver maintains a connection pool to each node, according to the distance assigned to it by the load balancing policy. If the distance is IGNORED, no connections are maintained.
      pool {

        # The number of connections in the pool for nodes considered as local.
        local.size = 8

        # The number of connections in the pool for nodes considered as remote. Note that the default load balancing policy used by DSBulk never considers remote nodes, so this setting has no effect when using the default load balancing policy.
        remote.size = 8

      }

      # The maximum number of requests that can be executed concurrently on a connection. This must be between 1 and 32768.
      max-requests-per-connection = 32768

    }

    # How long the driver waits for responses to control queries (e.g. fetching the list of nodes, refreshing the schema).
    control-connection.timeout = ${datastax-java-driver.basic.request.timeout}

    heartbeat {

      # The heartbeat interval. If a connection stays idle for that duration (no reads), the driver sends a dummy message on it to make sure it's still alive. If not, the connection is trashed
      # and replaced.
      interval = 30 seconds

      # How long the driver waits for the response to a heartbeat. If this timeout fires, the heartbeat is considered failed.
      timeout = ${datastax-java-driver.basic.request.timeout}

    }

    request {

      # Whether logging of server warnings generated during query execution should be disabled by the driver. All server generated warnings will be available programmatically via the ExecutionInfo object on the executed statement's ResultSet. If set to "false", this will prevent the driver from logging these warnings. The default for DSBulk is to disable driver-level query warnings, since these are already handled by DSBulk itself.
      #
      # NOTE: The log formatting for these warning messages will reuse the options defined for advanced.request-tracker.
      log-warnings = false

      # Whether a warning is logged when a request (such as a CQL `USE ...`) changes the active keyspace. The default for DSBulk is to disable warnings when issuing USE statements (DSBulk issues USE statements when necessary).
      warn-if-set-keyspace = false

    }

    # The component that handles authentication on each new connection.
    auth-provider {

      # The class of the provider. If it is not qualified, the driver assumes that it resides in one of the following packages:
      # - `com.datastax.oss.driver.internal.core.auth`
      # - `com.datastax.dse.driver.internal.core.auth`
      #
      # The DSE driver provides 3 implementations out of the box:
      # - `PlainTextAuthProvider`: uses plain-text credentials. It requires the `username` and `password` options. Should be used only when authenticating against Apache Cassandra(R) clusters; not recommended when authenticating against DSE clusters.
      # - `DsePlainTextAuthProvider`: provides SASL authentication using the PLAIN mechanism for DSE clusters secured with DseAuthenticator. It requires the `username` and `password` options, and optionally, an `authorization-id`.
      # - `DseGssApiAuthProvider`: provides GSSAPI authentication for DSE clusters secured with `DseAuthenticator`. Read the javadocs of this authenticator for detailed instructions.
      #
      # You can also specify a custom class that implements `AuthProvider` and has a public constructor with a `DriverContext` argument (to simplify this, the driver provides two abstract classes that can be extended: `DsePlainTextAuthProviderBase` and `DseGssApiAuthProviderBase`).
      #
      # You can also specify a custom class that implements AuthProvider and has a public constructor with a DriverContext argument.
      class = null

      # The username to use to authenticate against a cluster with authentication enabled. Providers that accept this setting:
      #
      #  - `PlainTextAuthProvider`
      #  - `DsePlainTextAuthProvider`
      #
      # @type string
      username = null

      # The password to use to authenticate against a cluster with authentication enabled. Providers that accept this setting:
      #
      #  - `PlainTextAuthProvider`
      #  - `DsePlainTextAuthProvider`
      #
      # @type string
      password = null

    }

    # The SSL engine factory that will initialize an SSL engine for each new connection to a server.
    ssl-engine-factory {

      # The class of the SSL engine factory. If it is not qualified, the driver assumes that it resides in the package `com.datastax.oss.driver.internal.core.ssl`. The driver provides a single implementation out of the box: DefaultSslEngineFactory, that uses the JDK's built-in SSL implementation.
      #
      # You can also specify a custom class that implements `SslEngineFactory` and has a public constructor with a `DriverContext` argument.
      # @type string
      class = null

      # Sample configuration for the default SSL factory: The cipher suites to enable when creating an SSLEngine for a connection. This property is optional. If it is not present, the driver won't explicitly enable cipher suites on the engine, which according to the JDK documentations results in "a minimum quality of service".
      # @type list<string>
      cipher-suites = null

      # Whether or not to require validation that the hostname of the server certificate's common name matches the hostname of the server being connected to. If not set, defaults to true.
      hostname-validation = true

      # The locations used to access truststore contents. If either truststore-path or keystore-path are specified, the driver builds an SSLContext from these files.  If neither option is specified, the default SSLContext is used, which is based on system property configuration.
      # @type string
      truststore-path = null

      # The password used to access truststore contents.
      # @type string
      truststore-password = null

      # The locations used to access keystore contents. If either truststore-path or keystore-path are specified, the driver builds an SSLContext from these files.  If neither option is specified, the default SSLContext is used, which is based on system property configuration.
      # @type string
      keystore-path = null

      # The password used to access keystore contents.
      # @type string
      keystore-password = null
    }

    # The policy that controls if the driver retries requests that have failed on one node.
    retry-policy {

      # The class of the policy. If it is not qualified, the driver assumes that it resides in the package `com.datastax.oss.driver.internal.core.retry`. DSBulk uses by default a special retry policy that opinionately retries most errors up to `max-retries` times.
      #
      # You can also specify a custom class that implements `RetryPolicy` and has a public constructor with two arguments: the `DriverContext` and a `String` representing the profile name.
      class = com.datastax.dsbulk.engine.internal.policies.retry.MultipleRetryPolicy

      # How many times to retry a failed query. Only valid for use with DSBulk's default retry policy (`MultipleRetryPolicy`).
      max-retries = 10

    }

    # Metrics in DSBulk are all disabled by default.
    metrics {}

    # Options to control the execution of continuous paging requests. Only applicable for unloads, and only if this feature is available in the remote cluster, ignored otherwise. Also, you need to enable continuous paging at DSBulk level for this to work, see `dsbulk.executor.continuousPaging.enabled` (it is enabled by default).
    continuous-paging {

      # The page size. The value specified here can be interpreted in number of rows or in number of bytes, depending on the unit defined with page-unit (see below). It controls how many rows (or how much data) will be retrieved simultaneously in a single network roundtrip (the goal being to avoid loading too many results in memory at the same time). If there are more results, additional requests will be used to retrieve them (either automatically if you iterate with the sync API, or explicitly with the async API's fetchNextPage method). The default is the same as the driver's normal request page size, i.e., 5000 (rows).
      page-size = ${datastax-java-driver.basic.request.page-size}

      # Whether the page-size option should be interpreted in number of rows or bytes. The default is false, i.e., the page size will be interpreted in number of rows.
      page-size-in-bytes = false

      # The maximum number of pages to return. The default is zero, which means retrieve all pages.
      max-pages = 0

      # Returns the maximum number of pages per second. The default is zero, which means no limit.
      max-pages-per-second = 0

      # The maximum number of pages that can be stored in the local queue. This value must be positive. The default is 4.
      max-enqueued-pages = 4

      # Timeouts for continuous paging. Note that there is no global timeout for continuous paging as there is for regular queries, because continuous paging queries can take an arbitrarily long time to complete. Instead, timeouts are applied to each exchange between the driver and the coordinator. In other words, if the driver decides to retry, all timeouts are reset.
      timeout {

        # How long to wait for the coordinator to send the first page.
        first-page = ${datastax-java-driver.basic.request.timeout}

        # How long to wait for the coordinator to send subsequent pages.
        other-pages = ${datastax-java-driver.basic.request.timeout}

      }
    }
  }
}
