# Note that a paragraph is written in one line, and paragraphs are separated by a blank line.
# This has the benefit of rendering well in markdown as well as plain-text help output (since
# the help text formatter wraps lines appropriately).
dsbulk {

  # JSON Connector configuration.
  connector.json {

    # The URL or path of the resource(s) to read from or write to.
    #
    # Which URL protocols are available depend on which URL stream handlers have been installed, but at least the **file** protocol is guaranteed to be supported for reads and writes, and the **http** and **https** protocols are guaranteed to be supported for reads.
    #
    # The file protocol can be used with all supported file systems, local or not.
    # - When reading: the URL can point to a single file, or to an existing directory; in case of a directory, the *fileNamePattern* setting can be used to filter files to read, and the *recursive* setting can be used to control whether or not the connector should look for files in subdirectories as well.
    # - When writing: the URL will be treated as a directory; if it doesn't exist, the loader will attempt to create it; json files will be created inside this directory, and their names can be controlled with the *fileNameFormat* setting.
    #
    # Note that if the value specified here does not have a protocol, then it is assumed to be a file protocol. Relative URLs will be resolved against the current working directory. Also, for convenience, if the path begins with a tilde (`~`), that symbol will be expanded to the current user's home directory.
    #
    # In addition the value `-` indicates `stdin` when loading and `stdout` when unloading. This is in line with Unix tools such as tar, which uses `-` to represent stdin/stdout when reading/writing an archive.
    #
    # Examples:
    #
    #     url = "/path/to/dir/or/file"           # without protocol
    #     url = "./path/to/dir/or/file"          # without protocol, relative to working directory
    #     url = "~/path/to/dir/or/file"          # without protocol, relative to the user's home directory
    #     url = "file:///path/to/dir/or/file"    # with file protocol
    #     url = "http://acme.com/file.json"      # with HTTP protocol
    #     url = "-"                              # to read json data from stdin (for load) or
    #     url = "-"                              # write json data to stdout (for unload)
    #
    # For other URLs: the URL will be read or written directly; settings like *fileNamePattern*, *recursive*, and *fileNameFormat* will have no effect.
    #
    # The default value is `-` (read from `stdin` / write to `stdout`).
    url = "-"

    # The mode for loading and unloading JSON documents. Valid values are:
    #
    # * MULTI_DOCUMENT: Each resource may contain an arbitrary number of successive JSON documents to be mapped to records. For example the format of each JSON document is a single document: `{doc1}`. The root directory for the JSON documents can be specified with `url` and the documents can be read recursively by setting `connector.json.recursive` to true.
    # * SINGLE_DOCUMENT: Each resource contains a root array whose elements are JSON documents to be mapped to records. For example, the format of the JSON document is an array with embedded JSON documents: `[ {doc1}, {doc2}, {doc3} ]`.
    mode = MULTI_DOCUMENT

    # The glob pattern to use when searching for files to read. The syntax to use is the glob syntax, as described in `java.nio.file.FileSystem.getPathMatcher()`. This setting is ignored when writing and for non-file URLs. Only applicable when the *url* setting points to a directory on a known filesystem, ignored otherwise.
    fileNamePattern = "**/*.json"

    # The file name format to use when writing. This setting is ignored when reading and for non-file URLs. The file name must comply with the formatting rules of `String.format()`, and must contain a `%d` format specifier that will be used to increment file name counters.
    fileNameFormat = "output-%0,6d.json"

    # Enable or disable scanning for files in the root's subdirectories. Only applicable when *url* is set to a directory on a known filesystem. Used for loading only.
    recursive = false

    # The maximum number of files that can be written simultaneously. This setting is ignored when reading and when the output URL is anything other than a directory on a filesystem. The special syntax `NC` can be used to specify a number of threads that is a multiple of the number of available cores, e.g. if the number of cores is 8, then 0.5C = 0.5 * 8 = 4 threads.
    maxConcurrentFiles = 0.25C

    # The file encoding to use for all read or written files.
    encoding = "UTF-8"

    # The number of JSON records to skip from each input file before the parser can begin to execute. This setting is ignored when writing.
    skipRecords = 0

    # The maximum number of records to read from or write to each file. When reading, all records past this number will be discarded. When writing, a file will contain at most this number of records; if more records remain to be written, a new file will be created using the *fileNameFormat* setting. Note that when writing to anything other than a directory, this setting is ignored. This feature is disabled by default (indicated by its `-1` value).
    maxRecords = -1

    # JSON parser features to enable. Valid values are all the enum constants defined in `com.fasterxml.jackson.core.JsonParser.Feature`. For example, a value of `{ ALLOW_COMMENTS : true, ALLOW_SINGLE_QUOTES : true }` will configure the parser to allow the use of comments and single-quoted strings in JSON data. Used for loading only.
    # @leaf
    # @type map<string,boolean>
    parserFeatures = {}

    # JSON generator features to enable. Valid values are all the enum constants defined in `com.fasterxml.jackson.core.JsonGenerator.Feature`. For example, a value of `{ ESCAPE_NON_ASCII : true, QUOTE_FIELD_NAMES : true }` will configure the generator to escape all characters beyond 7-bit ASCII and quote field names when writing JSON output. Used for unloading only.
    # @leaf
    # @type map<string,boolean>
    generatorFeatures = {}

    # A map of JSON serialization features to set. Map keys should be enum constants defined in `com.fasterxml.jackson.databind.SerializationFeature`. Used for unloading only.
    # @leaf
    # @type map<string,boolean>
    serializationFeatures = {}

    # A map of JSON deserialization features to set. Map keys should be enum constants defined in `com.fasterxml.jackson.databind.DeserializationFeature`. The default value is the only way to guarantee that floating point numbers will not have their precision truncated when parsed, but can result in slightly slower parsing. Used for loading only.
    # @leaf
    # @type map<string,boolean>
    deserializationFeatures = { USE_BIG_DECIMAL_FOR_FLOATS : true }

    # The strategy to use for filtering out entries when formatting output. Valid values are enum constants defined in `com.fasterxml.jackson.annotation.JsonInclude.Include` (but beware that the `CUSTOM` strategy cannot be honored). Used for unloading only.
    serializationStrategy = ALWAYS

    # Enable or disable pretty printing. When enabled, JSON records are written with indents. Used for unloading only.
    #
    # Note: Can result in much bigger records.
    prettyPrint = false

    # This group of settings is purely internal to the connector and are the interface for
    # DSBulk's infrastructure to customize how some settings are exposed to the user.
    #
    # In particular, how settings are documented and shortcut options that map to
    # settings that are commonly specified in the command line.
    metaSettings {
      # Specify how settings should be prioritized in generated docs and help.
      docHints {
        commonSettings = [url, skipRecords, maxRecords]
        preferredSettings = [mode]
      }

      # Specify shortcuts for "long" options.
      # Format:
      # shortcut = unqualified long option.
      shortcuts {
        encoding = encoding
        skipRecords = skipRecords
        maxRecords = maxRecords
        maxConcurrentFiles = maxConcurrentFiles
        url = url
      }
    }
  }

}
