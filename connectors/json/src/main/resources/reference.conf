# Note that a paragraph is written in one line, and paragraphs are separated by a blank line.
# This has the benefit of rendering well in markdown as well as plain-text help output (since
# the help text formatter wraps lines appropriately).
dsbulk {

  # Json Connector configuration.
  connector.json {

    # The URL or path of the resource(s) to read from or write to.
    #
    # Which URL protocols are available depend on which URL stream handlers have been installed, but at least the following are guaranteed to be supported:
    #
    # - **stdin**:  the stdin protocol can be used to read from standard input; the only valid URL for this protocol is: `stdin:/`.
    #
    #   This protocol cannot be used for writing.
    #
    # - **stdout**: the stdout protocol can be used to write to standard output; the only valid URL for this protocol is: `stdout:/`.
    #
    #   This protocol cannot be used for reading.
    #
    # - **file**: the file protocol can be used with all supported file systems, local or not.
    #     - **When reading**: the URL can point to a single file, or to an existing directory; in case of a directory, the *fileNamePattern* setting can be used to filter files to read, and the *recursive* setting can be used to control whether or not the connector should look for files in subdirectories as well.
    #     - **When writing**: the URL will be treated as a directory; if it doesn't exist, the loader will attempt to create it; Json files will be created inside this directory, and their names can be controlled with the *fileNameFormat* setting.
    #
    # Note that if the value specified here does not have a protocol, then it is assumed to be a file protocol.
    #
    # Examples:
    #
    #     url = /path/to/dir/or/file           # without protocol
    #     url = "file:///path/to/dir/or/file"  # with protocol
    #     url = "stdin:/"                      # to read json data from stdin
    #     url = "stdout:/"                     # to write json data to stdout
    #
    # For other URLs: the URL will be read or written directly; settings like *fileNamePattern*, *recursive*, and *fileNameFormat* will have no effect.
    #
    # This setting has no default value and must be supplied by the user.
    url = ""

    # The Json document mode.
    #
    # Valid values are:
    #
    # * *MULTI_DOCUMENT*: each resource may contain an arbitrary number of successive Json documents to be mapped to records, e.g.:
    # ```json
    # {/*doc1*/}
    # {/*doc2*/}
    # {/*doc3*/}
    # ...
    # ```
    # * *SINGLE_DOCUMENT*: each resource contains a root array whose elements are Json documents to be mapped to records, e.g.:
    # ```json
    # [
    # {/*doc1*/}
    # {/*doc2*/}
    # {/*doc3*/}
    # ...
    # ]
    # ```
    mode = MULTI_DOCUMENT

    # The glob pattern to use when searching for files to read. The syntax to use is the glob syntax, as described in `java.nio.file.FileSystem.getPathMatcher()`.
    #
    # Ignored when writing. Ignored for non-file URLs.
    #
    # Only applicable when the *url* setting points to a directory on a known filesystem, ignored otherwise.
    fileNamePattern = "**/*.json"

    # The file name format to use when writing.
    #
    # Ignored when reading. Ignored for non-file URLs.
    #
    # The file name must comply with the formatting rules of `String.format()`, and must contain a `%d` format specifier that will be used to increment file name counters.
    fileNameFormat = "output-%0,6d.json"

    # Whether to scan for files in subdirectories of the root directory.
    #
    # Only applicable when the *url* setting points to a directory on a known filesystem, ignored otherwise. Ignored when writing.
    recursive = false

    # The maximum number of files that can be written simultaneously.
    #
    # Ignored when reading.
    #
    # The special syntax `NC` can be used to specify a number of threads that is a multiple of the number of available cores, e.g. if the number of cores is 8, then 0.5C = 0.5 * 8 = 4 threads.
    maxConcurrentFiles = 0.25C

    # The file encoding to use.
    #
    # Note that this setting applies to all files to be read or written.
    encoding = "UTF-8"

    # Defines a number of Json records to skip from each input file before the parser can begin to execute.
    #
    # Ignored when writing.
    skipRecords = 0

    # Defines the maximum number of Json records to read from or write to each file.
    #
    # When reading, all records past this number will be discarded.
    #
    # When writing, a file will contain at most this number of records; if more records remain to be written, a new file will be created using the *fileNameFormat* setting.
    #
    # Note that when writing to anything other than a directory, this setting is ignored.
    #
    # This feature is disabled by default (indicated by its `-1` value).
    maxRecords = -1

    # Json parser features to enable.
    #
    # Ignored when writing.
    #
    # Valid values are all the enum constants defined in `com.fasterxml.jackson.core.JsonParser.Feature`.
    parserFeatures = []

    # Json generator features to enable.
    #
    # Ignored when reading.
    #
    # Valid values are all the enum constants defined in `com.fasterxml.jackson.core.JsonGenerator.Feature`.
    generatorFeatures = []

    # Whether to enable pretty print.
    #
    # Ignored when reading.
    #
    # When pretty print is enabled, Json records are written indented. Beware that this may result in much bigger records.
    prettyPrint = false

    # This group of settings is purely internal to the connector and are the interface for
    # DSBulk's infrastructure to customize how some settings are exposed to the user.
    #
    # In particular, how settings are documented and shortcut options that map to
    # settings that are commonly specified in the command line.
    metaSettings {
      # Specify how settings should be prioritized in generated docs and help.
      docHints {
        commonSettings = [url, skipRecords, maxRecords]
        preferredSettings = [mode]
      }

      # Specify shortcuts for "long" options.
      # Format:
      # shortcut = unqualified long option.
      shortcuts {
        encoding = encoding
        skipRecords = skipRecords
        maxRecords = maxRecords
        maxConcurrentFiles = maxConcurrentFiles
        url = url
      }
    }
  }

}
